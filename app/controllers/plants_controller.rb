require_relative "../../lib/api_communicator"
class PlantsController < ApplicationController
  before_action :require_login



  def death
  end

  def show
    current_user.update(passed_tutorial:true)
    #Get stats of plant to display later
    @plant = Plant.find(params[:id])
    @plant_type = @plant.state.plant_type
    @state = @plant.state

    @filled_hp = @plant.hp
    @empty_hp = @state.max_hp - @filled_hp

    @filled_water_points = @plant.water_points
    @empty_water_points = @state.water_need - @filled_water_points

    @filled_soil_points = @plant.soil_points
    @empty_soil_points = @state.soil_need - @filled_soil_points

    #maybe have a random number picker that picks when a plant will randomly get
    #hit with an ailment, randomize from list of ailments
    @ailment = @plant.ailment
  end

  def index
    @plants = current_user.plants
  end

  def new
    @plant = Plant.new
    states = State.all
    @states = states.select {|state| state.name == "Seedling" && state.cost <= current_user.balance}
    # @states = states.select {|state| state.name == "Seedling"}

    if @states.empty?
      flash[:warning] = "You can't afford a plant! Go get some $$$!"
    end
  end

  def create
    #declare variables
    @plant = Plant.new(plant_params)
    @plant.user = current_user
    @plant.img_url = @plant.state.img_url

    #check to make sure that the user can afford this plant
    #if they can deduct from their balance and go to show page
    if current_user.balance >= @plant.state.cost && @plant.save
      new_balance = current_user.balance - @plant.state.cost
      current_user.update(balance:new_balance)
      redirect_to @plant
    #If they can't warn them that they can't afford it
    else
      flash[:warning] = "You can't afford to buy that plant!"
      redirect_to new_plant_path
    end

  end

  def edit
    @plant = Plant.find(params[:id])
  end

  def update
    @plant = Plant.find(params[:id])
    #can only update a plant's name for now
    if @plant.update(plant_params)
      redirect_to @plant
    else
      render :edit
    end
  end

  def destroy
    #delete plant, go to death page
    @plant = Plant.find(params[:id])
    @name = @plant.name
    @plant.destroy
    redirect_to plants_death_path
  end

  def seed
    #add water and soil actions to the user
    # @plant = Plant.find(params[:id])
  end



  def personality
  end

  def create_personality
    #based on information given by personality personality_quiz
    #assign person to certain plant
    masc = 0
    fem = 0
    answers = params[:answers]
    answers.each do |key, answer|
      if User.female_options.include?(answer)
        fem += 1
      else
        masc += 1
      end
    end
    if fem > masc
      plant_type = PlantType.find_by(name: "Rose")
    else
      plant_type = PlantType.find_by(name: "Cactus")
    end
    #create plant
    state = State.find_by(name: "Seedling", plant_type: plant_type)
    @plant = Plant.create(user: current_user, name: params[:plant_name], state: state, img_url: state.img_url)
    #need to bind useractions to that plant
    current_user.add_user_actions
    # @user = User.find(session[:user_id])

    current_user.save
    redirect_to plants_seed_path
  end

  #processing the actions generated by the user on the plant's show page
  def actions
    @plant = Plant.find(params[:id])
    @action_name = Action.find(params[:action_id]).name
    @ailment = @plant.ailment
    @money = current_user.balance

    #make case statement later
    #Trivia
    if @action_name == "Get $$$$"
      redirect_to "/plants/#{@plant.id}/trivia"
      return
    #Soil is 2 dollars, subtract 2 from user
    elsif @ailment != nil && @ailment.action.name == @action_name

      if @money < 2
        flash[:warning] = "You don't have enough money"
      else
        @money = @money - 2
        current_user.update(balance:@money)
        @plant.update(ailment_id:nil)
      end

    #Soil is 2 dollars, subtract 2 from user
    elsif @action_name == "Add Soil" && @plant.soil_points < @plant.state.soil_need
      #verify that it doesn't max out later
      if @money < 2
        flash[:warning] = "You don't have enough money"
      else
        @money = @money - 2
        soil_points = @plant.soil_points + 1
        current_user.update(balance:@money)
        @plant.update(soil_points:soil_points)
      end
    #Water is 1 dollar, subtract 1 from user
    elsif @action_name == "Add Water" && @plant.water_points < @plant.state.water_need
      if @money < 1
        flash[:warning] = "You don't have enough money"
      else
        @money = @money - 1
        water_points = @plant.water_points + 1
        current_user.update(balance:@money)
        @plant.update(water_points:water_points)
      end
    elsif @action_name == "Move to Sunlight" && @ailment != nil && @ailment.action.name == @action_name
      @plant.update(ailment_id:nil)
    elsif @action_name == "Shout" && @ailment != nil && @ailment.action.name == @action_name
      @plant.update(ailment_id:nil)
    #got rid of stroke the leaves
    #whispering will subtract 1 from user but not tell them
  elsif (@action_name == "Talk to Plant") && @ailment != nil && (@ailment.action.name == @action_name || @ailment.action.name)
      if @money < 1
        flash[:warning] = "You don't have enough money"
      else
        @money = @money - 1
        @plant.update(ailment_id:nil)
        current_user.update(balance:@money)
      end
    elsif (@action_name == "Talk to Plant") && @plant.hp < @plant.state.max_hp
      if @money < 1
        flash[:warning] = "You don't have enough money"
      else
        @money = @money - 1
        hp = @plant.hp + 1
        current_user.update(balance:@money)
        @plant.update(hp:hp)
      end

      #make balance not go below 0
      if @money < 0
        @money = 0
      end
      current_user.update(balance:@money)
     # statement flash message pop up "That didn't work try again"
    else
      flash[:warning] = "#{@action_name} didn't work! Try again"
    end


    ##check to see if plant is ready for evolution, if it is i need to change plant state, and
    #all plant attributes
    # Split into 2 helper methods later? evolved? and evolve in plant model
    if @plant.hp == @plant.state.max_hp && @plant.state.next_id != nil && @plant.water_points == @plant.state.water_need && @plant.soil_points == @plant.state.soil_need
      new_state = State.find((@plant.state.next_id))
      new_wp = new_state.water_need/2
      new_sp = new_state.soil_need/2
      new_img_url = new_state.img_url
      new_hp = new_state.max_hp/2
      @plant.update(water_points: new_wp, soil_points: new_sp, img_url:new_img_url, hp:new_hp, state:new_state)
    end
    redirect_to @plant
  end

  def trivia
    @question = get_random_question_from_api
    @plant = Plant.find(params[:id])
  end

  def process_question
    @plant = Plant.find(params[:id])
    if params["answers"][0] == "i"
      #minus one heart when incorrect and minus $3
      balance = current_user.balance
      balance -= 3

      #make sure balance doesn't go below 0
      if balance < 0
        balance = 0
      end

      current_user.update(balance:balance)
      if @plant.hp > 1
        hp = @plant.hp - 1
        @plant.update(hp:hp)
      elsif @plant.hp == 1
        @plant.destroy
        redirect_to '/plants/death'
        return
      end
      flash[:warning] = "#{params["answers"][1, params["answers"].length-1]} is the wrong answer! Try again"

    elsif params["answers"][0] == "c"
      #user balance + 5
      balance = current_user.balance
      balance += 5
      current_user.update(balance:balance)
      if @plant.hp < @plant.state.max_hp
        hp = @plant.hp + 1
        @plant.update(hp:hp)
      end
      flash[:warning] = "Congrats! #{params["answers"][1, params["answers"].length-1]} is right! You got one heart!"
    end
    #flash message?

    redirect_to @plant
  end

  private

  def require_login
    redirect_to '/' unless session.include? :user_id
  end

  def plant_params
    params.require(:plant).permit(:name, :state_id, :action)
  end
end
